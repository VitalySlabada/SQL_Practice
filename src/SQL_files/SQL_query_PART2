-- PART 2

-- JOINS

-- Inner - default, INNER is optional command
-- Foreign key




-- list employees firstname lastname and country names
SELECT first_name, last_name, country
FROM employees as e join regions r
ON e.region_id = r.region_id;


-- first name email division for employees who have email address

SELECT first_name, last_name, division, email
FROM employees as e join departments d
ON e.department = d.department
WHERE email is not NULL;


-- first name , email, division, cointry  ---- 3 tables combined
SELECT first_name, email, division, country
FROM employees as e
inner join departments d on e.department = d.department
inner join regions r on e.region_id = r.region_id;

SELECT distinct department
from departments;


-- LEFT OUTER JOIN
SELECT DISTINCT  e.department, d.department
from employees e Left JOIN departments d on e.department = d.department;



-- unique values
SELECT DISTINCT  e.department, d.department
from employees e Left JOIN departments d
on e.department = d.department
where d.department is null;

-- FULL JOIN
SELECT DISTINCT  e.department, d.department
from employees e FULL JOIN departments d
on e.department = d.department;


-- all emplyees that working in electronic division
SELECT  *
FROM employees e JOIN departments d on e.department = d.department
where division = 'Electronics';

-- other solution
Select *
FROM employees
where department IN (Select department from departments where division = 'Electronics');

-- SET operators
-- Union removes dupolicate
-- Union all - does not remove duplicates
-- EXCEPT (MINUS) first minus second
-- Intersect - present in both tables

Select department
from employees
Except
SELECT department
from departments;


-- can combine anything
Select first_name
from employees
Union
SELECT department
from departments;

Select department
from employees
Union all
SELECT department
from departments;




-- ////CREATE


CREATE TABLE Towns (
                       id SERIAL UNIQUE NOT NULL,
                       code VARCHAR(10) NOT NULL, -- not unique
                       article TEXT,
                       name TEXT NOT NULL -- not unique
);


insert into towns (
    code, article, name
)
select
    left(md5(i::text), 10),
    md5(random()::text),
    md5(random()::text)
from generate_series(1, 1000000) s(i);

select count(*)
FROM towns;

select *
FROM towns;



EXPLAIN ANALYZE
SELECT *
FROM towns
WHERE name = '540f57490ca454791e22437341ff6e8e';

EXPLAIN ANALYZE
SELECT *
FROM towns
WHERE id = 1232;

CREATE INDEX idx_towns_name ON towns(name);
CREATE INDEX idx_towns_article ON towns(article);

DROP INDEX IF EXISTS towns_id_key;

SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
        schemaname = 'public'
ORDER BY
    tablename,
    indexname;



-- FUNCTIONS     METHODS
-- create
CREATE OR REPLACE FUNCTION  get_department_count_by_name (dep_name varchar)
returns int
language plpgsql
as
$$
declare
    department_count integer;
begin
    select count(*)
    into department_count
    from employees
    where department = dep_name;

    return department_count;
end;
$$;
-- call

select get_department_count_by_name('Sports');

-- drop
DROP FUNCTION  get_department_count_by_name(dep_name varchar);

-- return a table with the function
CREATE OR REPLACE  FUNCTION get_department(p_pattern varchar)
returns table(employee_name varchar,
            employee_email   varchar)

language plpgsql
as
    $$
    begin
        return query
        select  first_name, email
        from employees
        where department ilike p_pattern;
    end;
    $$;


Select * from get_department('%th%');

DROP function   get_department(p_pattern varchar);




Create or replace procedure update_department (emp_id int)
language  plpgsql
as
$$
    BEGIN
    update employees set department = 'Toys'
        where employee_id = emp_id;
    commit;
    end;

$$;


select *
from employees
where   employee_id = 10;


call update_department(10);


-- TRIGGER

DROP TABLE IF EXISTS mentors;
CREATE TABLE mentors(
                        id INT GENERATED ALWAYS AS IDENTITY,
                        first_name varchar(40) not null,
                        last_name varchar(40) not null ,
                        primary key(id)
);

DROP TABLE IF EXISTS mentors;
CREATE TABLE mentors(
                        id INT GENERATED ALWAYS AS IDENTITY,
                        first_name varchar(40) not null,
                        last_name varchar(40) not null ,
                        primary key(id)
);

DROP TABLE IF EXISTS mentor_audit;
CREATE TABLE mentor_audit(
                             id INT GENERATED ALWAYS AS IDENTITY,
                             mentor_id INT not null,
                             last_name varchar(40) not null ,
                             changed_on timestamp(6) not null,
                             primary key(id)
);


insert into mentors(first_name, last_name) values ('Harold','Finch');
insert into mentors(first_name, last_name) values ('Severus','Snape');

CREATE OR REPLACE FUNCTION log_last_name_changes()
    returns trigger
    language plpgsql
as
$$
begin
    IF NEW.last_name <> OLD.last_name THEN
        INSERT INTO mentor_audit(mentor_id,last_name,changed_on) VALUES
            (OLD.id,OLD.last_name,now());
    end if;

    Return NEW;
end
$$;

CREATE TRIGGER last_name_change
    BEFORE update
    ON mentors
    FOR EACH ROW
EXECUTE PROCEDURE log_last_name_changes();

update mentors
set last_name ='XYZ'
where id =2;